{"version":3,"sources":["App.js","generator.js","index.js"],"names":["App","length","setLength","useState","includeUppercase","setIncludeUppercase","includeLowercase","setIncludeLowercase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","password","setPassword","handleLengthChange","e","target","value","_jsxs","className","children","_jsx","type","min","max","onChange","checked","onClick","handleGeneratePassword","newPassword","generatePassword","options","allChars","i","Math","floor","random","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"qMA+FeA,MA3Ff,WACE,MAAOC,EAAQC,GAAaC,mBAAS,KAC9BC,EAAkBC,GAAuBF,oBAAS,IAClDG,EAAkBC,GAAuBJ,oBAAS,IAClDK,EAAgBC,GAAqBN,oBAAS,IAC9CO,EAAgBC,GAAqBR,oBAAS,IAC9CS,EAAUC,GAAeV,mBAAS,IAEnCW,EAAsBC,IAC1Bb,EAAUa,EAAEC,OAAOC,MAAM,EAc3B,OACEC,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBC,cAAA,UAAQF,UAAU,aAAYC,SAC5BC,cAAA,MAAAD,SAAI,4BAENF,eAAA,OAAKC,UAAU,YAAWC,SAAA,CACxBF,eAAA,OAAKC,UAAU,WAAUC,SAAA,CACvBC,cAAA,MAAAD,SAAI,uBACJC,cAAA,OAAKF,UAAU,mBAAkBC,SAAER,OAErCM,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,MAAAD,SAAI,YACJF,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBC,cAAA,SAAAD,SAAO,WACPC,cAAA,SACEC,KAAK,QACLC,IAAK,EACLC,IAAK,GACLP,MAAOhB,EACPwB,SAAUX,IAEZO,cAAA,SACEC,KAAK,SACLC,IAAK,EACLC,IAAK,GACLP,MAAOhB,EACPwB,SAAUX,OAGdI,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBC,cAAA,SAAAD,SAAO,cACPC,cAAA,SACEC,KAAK,WACLI,QAAStB,EACTqB,SAAWV,GAAMV,EAAoBU,EAAEC,OAAOU,cAGlDR,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBC,cAAA,SAAAD,SAAO,cACPC,cAAA,SACEC,KAAK,WACLI,QAASpB,EACTmB,SAAWV,GAAMR,EAAoBQ,EAAEC,OAAOU,cAGlDR,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBC,cAAA,SAAAD,SAAO,YACPC,cAAA,SACEC,KAAK,WACLI,QAASlB,EACTiB,SAAWV,GAAMN,EAAkBM,EAAEC,OAAOU,cAGhDR,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBC,cAAA,SAAAD,SAAO,YACPC,cAAA,SACEC,KAAK,WACLI,QAAShB,EACTe,SAAWV,GAAMJ,EAAkBI,EAAEC,OAAOU,cAGhDL,cAAA,UAAQM,QAxEeC,KAC7B,MAMMC,ECvBsBC,EAAC7B,EAAQ8B,KACrC,MAAM,iBAAE3B,EAAgB,iBAAEE,EAAgB,eAAEE,EAAc,eAAEE,GAAmBqB,EAM/E,IAAIC,EAAW,GAMf,GALI5B,IAAkB4B,GANC,8BAOnB1B,IAAkB0B,GANC,8BAOnBxB,IAAgBwB,GANA,cAOhBtB,IAAgBsB,GANA,4BAQH,KAAbA,EAAiB,MAAO,GAE5B,IAAIpB,EAAW,GACf,IAAK,IAAIqB,EAAI,EAAGA,EAAIhC,EAAQgC,IAExBrB,GAAYoB,EADQE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAS/B,SAI5D,OAAOW,CAAQ,EDEKkB,CAAiB7B,EANrB,CACdG,mBACAE,mBACAE,iBACAE,mBAGFG,EAAYgB,EAAY,EAgEsBT,SAAC,8BAKnD,EExFaiB,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHpB,cAACqB,IAAMC,WAAU,CAAAvB,SACfC,cAACrB,EAAG,M","file":"static/js/main.7b1b95cd.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { generatePassword } from \"./generator\";\n\nfunction App() {\n  const [length, setLength] = useState(16);\n  const [includeUppercase, setIncludeUppercase] = useState(true);\n  const [includeLowercase, setIncludeLowercase] = useState(true);\n  const [includeNumbers, setIncludeNumbers] = useState(true);\n  const [includeSymbols, setIncludeSymbols] = useState(true);\n  const [password, setPassword] = useState(\"\");\n\n  const handleLengthChange = (e) => {\n    setLength(e.target.value);\n  };\n\n  const handleGeneratePassword = () => {\n    const options = {\n      includeUppercase,\n      includeLowercase,\n      includeNumbers,\n      includeSymbols,\n    };\n    const newPassword = generatePassword(length, options);\n    setPassword(newPassword);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Password Generator v2</h1>\n      </header>\n      <div className=\"Generator\">\n        <div className=\"Password\">\n          <h2>Generated Password</h2>\n          <div className=\"Password-display\">{password}</div>\n        </div>\n        <div className=\"Options\">\n          <h2>Options</h2>\n          <div className=\"Option\">\n            <label>Length</label>\n            <input\n              type=\"range\"\n              min={8}\n              max={64}\n              value={length}\n              onChange={handleLengthChange}\n            />\n            <input\n              type=\"number\"\n              min={8}\n              max={64}\n              value={length}\n              onChange={handleLengthChange}\n            />\n          </div>\n          <div className=\"Option\">\n            <label>Uppercase</label>\n            <input\n              type=\"checkbox\"\n              checked={includeUppercase}\n              onChange={(e) => setIncludeUppercase(e.target.checked)}\n            />\n          </div>\n          <div className=\"Option\">\n            <label>Lowercase</label>\n            <input\n              type=\"checkbox\"\n              checked={includeLowercase}\n              onChange={(e) => setIncludeLowercase(e.target.checked)}\n            />\n          </div>\n          <div className=\"Option\">\n            <label>Numbers</label>\n            <input\n              type=\"checkbox\"\n              checked={includeNumbers}\n              onChange={(e) => setIncludeNumbers(e.target.checked)}\n            />\n          </div>\n          <div className=\"Option\">\n            <label>Symbols</label>\n            <input\n              type=\"checkbox\"\n              checked={includeSymbols}\n              onChange={(e) => setIncludeSymbols(e.target.checked)}\n            />\n          </div>\n          <button onClick={handleGeneratePassword}>Generate Password</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const generatePassword = (length, options) => {\r\n    const { includeUppercase, includeLowercase, includeNumbers, includeSymbols } = options;\r\n    const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\r\n    const numberChars = '0123456789';\r\n    const symbolChars = '!@#$%^&*()_+[]{}|;:,.<>?';\r\n\r\n    let allChars = '';\r\n    if (includeUppercase) allChars += uppercaseChars;\r\n    if (includeLowercase) allChars += lowercaseChars;\r\n    if (includeNumbers) allChars += numberChars;\r\n    if (includeSymbols) allChars += symbolChars;\r\n\r\n    if (allChars === '') return '';\r\n\r\n    let password = '';\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allChars.length);\r\n        password += allChars[randomIndex];\r\n    }\r\n    \r\n    return password;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}